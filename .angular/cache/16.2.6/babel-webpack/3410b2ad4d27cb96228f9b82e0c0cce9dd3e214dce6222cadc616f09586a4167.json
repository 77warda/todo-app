{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./new-todos.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./new-todos.component.scss?ngResource\";\nimport { Component, EventEmitter, Output } from \"@angular/core\";\nimport { Validators, FormBuilder } from \"@angular/forms\";\nimport { DataShareService } from \"../data-share.service\";\nexport let NewTodosComponent = class NewTodosComponent {\n  constructor(fb, todoEditService) {\n    this.fb = fb;\n    this.todoEditService = todoEditService;\n    this.addTodoItem = new EventEmitter();\n    this.todoForm = this.fb.group({\n      name: [\"\", Validators.required]\n    });\n    this.todos = [];\n    this.selectedTodoSubscription = this.todoEditService.selectedTodo$.subscribe(selectedTodo => {\n      this.selectedTodo = selectedTodo;\n      this.todoForm.patchValue({\n        name: selectedTodo ? selectedTodo.name : \"\"\n      });\n    });\n  }\n  ngOnInit() {\n    this.todoForm = this.fb.group({\n      name: [\"\", Validators.required]\n    });\n  }\n  // addTodo() {\n  //   if (this.todoForm.valid) {\n  //     if (this.selectedTodo) {\n  //       // Update existing todo\n  //       const index = this.todos.findIndex(\n  //         (todo) => todo.id === this.selectedTodo.id\n  //       );\n  //       if (index !== -1) {\n  //         this.todos[index] = {\n  //           ...this.selectedTodo,\n  //           name: this.todoForm.value.name,\n  //         };\n  //         console.log(\"edit\", this.todos);\n  //       }\n  //     } else {\n  //       // Add new todo\n  //       const newTodo = {\n  //         id: this.todos.length + 1, // Generate a unique ID (you can use a more robust method)\n  //         name: this.todoForm.value.name,\n  //       };\n  //       this.todos.push(newTodo);\n  //       console.log(\"add\", newTodo);\n  //     }\n  //     // Reset the form and selectedTodo\n  //     this.todoForm.reset();\n  //     this.todoEditService.clearTodo();\n  //   }\n  // }\n  addTodo() {\n    console.log(\"Selected Todo:\", this.selectedTodo);\n    console.log(\"Todos before update:\", this.todos);\n    if (this.todoForm.valid) {\n      // ... rest of the code\n      console.log(\"Todos after update:\", this.todos);\n    }\n  }\n  ngOnDestroy() {\n    this.selectedTodoSubscription.unsubscribe();\n  }\n  static #_ = this.ctorParameters = () => [{\n    type: FormBuilder\n  }, {\n    type: DataShareService\n  }];\n  static #_2 = this.propDecorators = {\n    addTodoItem: [{\n      type: Output\n    }]\n  };\n};\nNewTodosComponent = __decorate([Component({\n  selector: \"org-new-todos\",\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n}), __metadata(\"design:paramtypes\", [FormBuilder, DataShareService])], NewTodosComponent);","map":{"version":3,"names":["__decorate","__metadata","__NG_CLI_RESOURCE__0","__NG_CLI_RESOURCE__1","Component","EventEmitter","Output","Validators","FormBuilder","DataShareService","NewTodosComponent","constructor","fb","todoEditService","addTodoItem","todoForm","group","name","required","todos","selectedTodoSubscription","selectedTodo$","subscribe","selectedTodo","patchValue","ngOnInit","addTodo","console","log","valid","ngOnDestroy","unsubscribe","_","ctorParameters","type","_2","propDecorators","selector","template","styles"],"sources":["/Users/macbookpro/OneSchool/todo app/todo-app/todo/src/app/new-todos/new-todos.component.ts"],"sourcesContent":["import { __decorate, __metadata } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./new-todos.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./new-todos.component.scss?ngResource\";\nimport { Component, EventEmitter, Output } from \"@angular/core\";\nimport { Validators, FormBuilder } from \"@angular/forms\";\nimport { DataShareService } from \"../data-share.service\";\nexport let NewTodosComponent = class NewTodosComponent {\n    constructor(fb, todoEditService) {\n        this.fb = fb;\n        this.todoEditService = todoEditService;\n        this.addTodoItem = new EventEmitter();\n        this.todoForm = this.fb.group({\n            name: [\"\", Validators.required],\n        });\n        this.todos = [];\n        this.selectedTodoSubscription =\n            this.todoEditService.selectedTodo$.subscribe((selectedTodo) => {\n                this.selectedTodo = selectedTodo;\n                this.todoForm.patchValue({\n                    name: selectedTodo ? selectedTodo.name : \"\",\n                });\n            });\n    }\n    ngOnInit() {\n        this.todoForm = this.fb.group({\n            name: [\"\", Validators.required],\n        });\n    }\n    // addTodo() {\n    //   if (this.todoForm.valid) {\n    //     if (this.selectedTodo) {\n    //       // Update existing todo\n    //       const index = this.todos.findIndex(\n    //         (todo) => todo.id === this.selectedTodo.id\n    //       );\n    //       if (index !== -1) {\n    //         this.todos[index] = {\n    //           ...this.selectedTodo,\n    //           name: this.todoForm.value.name,\n    //         };\n    //         console.log(\"edit\", this.todos);\n    //       }\n    //     } else {\n    //       // Add new todo\n    //       const newTodo = {\n    //         id: this.todos.length + 1, // Generate a unique ID (you can use a more robust method)\n    //         name: this.todoForm.value.name,\n    //       };\n    //       this.todos.push(newTodo);\n    //       console.log(\"add\", newTodo);\n    //     }\n    //     // Reset the form and selectedTodo\n    //     this.todoForm.reset();\n    //     this.todoEditService.clearTodo();\n    //   }\n    // }\n    addTodo() {\n        console.log(\"Selected Todo:\", this.selectedTodo);\n        console.log(\"Todos before update:\", this.todos);\n        if (this.todoForm.valid) {\n            // ... rest of the code\n            console.log(\"Todos after update:\", this.todos);\n        }\n    }\n    ngOnDestroy() {\n        this.selectedTodoSubscription.unsubscribe();\n    }\n    static { this.ctorParameters = () => [\n        { type: FormBuilder },\n        { type: DataShareService }\n    ]; }\n    static { this.propDecorators = {\n        addTodoItem: [{ type: Output }]\n    }; }\n};\nNewTodosComponent = __decorate([\n    Component({\n        selector: \"org-new-todos\",\n        template: __NG_CLI_RESOURCE__0,\n        styles: [__NG_CLI_RESOURCE__1]\n    }),\n    __metadata(\"design:paramtypes\", [FormBuilder,\n        DataShareService])\n], NewTodosComponent);\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,UAAU,QAAQ,OAAO;AAC9C,OAAOC,oBAAoB,MAAM,uCAAuC;AACxE,OAAOC,oBAAoB,MAAM,uCAAuC;AACxE,SAASC,SAAS,EAAEC,YAAY,EAAEC,MAAM,QAAQ,eAAe;AAC/D,SAASC,UAAU,EAAEC,WAAW,QAAQ,gBAAgB;AACxD,SAASC,gBAAgB,QAAQ,uBAAuB;AACxD,OAAO,IAAIC,iBAAiB,GAAG,MAAMA,iBAAiB,CAAC;EACnDC,WAAWA,CAACC,EAAE,EAAEC,eAAe,EAAE;IAC7B,IAAI,CAACD,EAAE,GAAGA,EAAE;IACZ,IAAI,CAACC,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACC,WAAW,GAAG,IAAIT,YAAY,CAAC,CAAC;IACrC,IAAI,CAACU,QAAQ,GAAG,IAAI,CAACH,EAAE,CAACI,KAAK,CAAC;MAC1BC,IAAI,EAAE,CAAC,EAAE,EAAEV,UAAU,CAACW,QAAQ;IAClC,CAAC,CAAC;IACF,IAAI,CAACC,KAAK,GAAG,EAAE;IACf,IAAI,CAACC,wBAAwB,GACzB,IAAI,CAACP,eAAe,CAACQ,aAAa,CAACC,SAAS,CAAEC,YAAY,IAAK;MAC3D,IAAI,CAACA,YAAY,GAAGA,YAAY;MAChC,IAAI,CAACR,QAAQ,CAACS,UAAU,CAAC;QACrBP,IAAI,EAAEM,YAAY,GAAGA,YAAY,CAACN,IAAI,GAAG;MAC7C,CAAC,CAAC;IACN,CAAC,CAAC;EACV;EACAQ,QAAQA,CAAA,EAAG;IACP,IAAI,CAACV,QAAQ,GAAG,IAAI,CAACH,EAAE,CAACI,KAAK,CAAC;MAC1BC,IAAI,EAAE,CAAC,EAAE,EAAEV,UAAU,CAACW,QAAQ;IAClC,CAAC,CAAC;EACN;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAQ,OAAOA,CAAA,EAAG;IACNC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAE,IAAI,CAACL,YAAY,CAAC;IAChDI,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAE,IAAI,CAACT,KAAK,CAAC;IAC/C,IAAI,IAAI,CAACJ,QAAQ,CAACc,KAAK,EAAE;MACrB;MACAF,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAE,IAAI,CAACT,KAAK,CAAC;IAClD;EACJ;EACAW,WAAWA,CAAA,EAAG;IACV,IAAI,CAACV,wBAAwB,CAACW,WAAW,CAAC,CAAC;EAC/C;EAAC,QAAAC,CAAA,GACQ,IAAI,CAACC,cAAc,GAAG,MAAM,CACjC;IAAEC,IAAI,EAAE1B;EAAY,CAAC,EACrB;IAAE0B,IAAI,EAAEzB;EAAiB,CAAC,CAC7B;EAAA,QAAA0B,EAAA,GACQ,IAAI,CAACC,cAAc,GAAG;IAC3BtB,WAAW,EAAE,CAAC;MAAEoB,IAAI,EAAE5B;IAAO,CAAC;EAClC,CAAC;AACL,CAAC;AACDI,iBAAiB,GAAGV,UAAU,CAAC,CAC3BI,SAAS,CAAC;EACNiC,QAAQ,EAAE,eAAe;EACzBC,QAAQ,EAAEpC,oBAAoB;EAC9BqC,MAAM,EAAE,CAACpC,oBAAoB;AACjC,CAAC,CAAC,EACFF,UAAU,CAAC,mBAAmB,EAAE,CAACO,WAAW,EACxCC,gBAAgB,CAAC,CAAC,CACzB,EAAEC,iBAAiB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}