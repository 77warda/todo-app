"use strict";
self["webpackHotUpdate_org_source"]("components-task-list-stories",{

/***/ "./todo/src/app/components/task.component.ts":
/*!***************************************************!*\
  !*** ./todo/src/app/components/task.component.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2022/core.mjs");
Object(function webpackMissingModule() { var e = new Error("Cannot find module '../models/task.model'"); e.code = 'MODULE_NOT_FOUND'; throw e; }());



let TaskComponent = class TaskComponent {
  constructor() {
    this.PinTask = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter();
    this.ArchiveTask = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter();
  }
  /**
   * @ignore
   * Component method to trigger the onPin event
   * @param id string
   */
  onPin(id) {
    this.PinTask.emit(id);
  }
  /**
   * @ignore
   * Component method to trigger the onArchive event
   * @param id string
   */
  onArchive(id) {
    this.ArchiveTask.emit(id);
  }
  static #_ = this.propDecorators = {
    task: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
    }],
    PinTask: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Output
    }],
    ArchiveTask: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Output
    }]
  };
};
TaskComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Component)({
  selector: 'app-task',
  template: `
    <div class="list-item {{ task?.state }}">
      <label
        [attr.aria-label]="'archiveTask-' + task?.id"
        for="checked-{{ task?.id }}"
        class="checkbox"
      >
        <input
          type="checkbox"
          disabled="true"
          [defaultChecked]="task?.state === 'TASK_ARCHIVED'"
          name="checked-{{ task?.id }}"
          id="checked-{{ task?.id }}"
        />
        <span class="checkbox-custom" (click)="onArchive(task?.id)"></span>
      </label>
      <label
        [attr.aria-label]="task?.title + ''"
        for="title-{{ task?.id }}"
        class="title"
      >
        <input
          type="text"
          [value]="task?.title"
          readonly="true"
          id="title-{{ task?.id }}"
          name="title-{{ task?.id }}"
          placeholder="Input title"
        />
      </label>
      <button
        *ngIf="task?.state !== 'TASK_ARCHIVED'"
        class="pin-button"
        [attr.aria-label]="'pinTask-' + task?.id"
        (click)="onPin(task?.id)"
      >
        <span class="icon-star"></span>
      </button>
    </div>
  `
})], TaskComponent);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (TaskComponent);

/***/ })

});
//# sourceMappingURL=components-task-list-stories.eb1320a9cea2aeb88811.hot-update.js.map