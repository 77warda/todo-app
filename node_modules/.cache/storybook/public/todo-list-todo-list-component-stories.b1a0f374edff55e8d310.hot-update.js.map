{"version":3,"file":"todo-list-todo-list-component-stories.b1a0f374edff55e8d310.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA","sources":["webpack://@org/source/./todo/src/app/todo-list/todo-list.component.ts"],"sourcesContent":["import { __decorate, __metadata } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./todo-list.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./todo-list.component.scss?ngResource\";\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nexport let TodoListComponent = class TodoListComponent {\n    constructor(http) {\n        this.http = http;\n        this.todos = [];\n        this.deleteTodoItem = new EventEmitter();\n        this.markAsComplete = new EventEmitter();\n        this.clearcompletedItems = new EventEmitter();\n        this.isLoading = false;\n        this.filter = 'all';\n    }\n    ngOnInit() {\n        let isLoading = true;\n        this.http.get('YOUR_API_ENDPOINT').subscribe((todos) => {\n            // Replace the existing todos with the loaded todos\n            this.todos = todos;\n            // Set isLoading to false once data is loaded\n            isLoading = false;\n        }, (error) => {\n            console.error('Error fetching todos: ', error);\n            // Set isLoading to false in case of error as well\n            isLoading = false;\n        });\n    }\n    // fetchTodos() {\n    //   this.todoService.getTodos().subscribe((response) => {\n    //     this.todos = response.map((todo) => ({ ...todo, isLoading: true }));\n    //     this.isLoading = true;\n    //     setTimeout(() => {\n    //       this.todos.forEach((todo) => (todo.isLoading = false));\n    //       this.isLoading = false; // Set isLoading to false once data is loaded\n    //     }, 2000);\n    //   });\n    // }\n    deleteTodo(todoId) {\n        this.deleteTodoItem.emit(todoId);\n    }\n    markCompleted(todo) {\n        this.markAsComplete.emit(todo);\n    }\n    clearCompleted() {\n        this.clearcompletedItems.emit();\n    }\n    getFilteredTodos() {\n        if (this.filter === 'active') {\n            return this.todos.filter((todo) => !todo.complete);\n        }\n        else if (this.filter === 'completed') {\n            return this.todos.filter((todo) => todo.complete);\n        }\n        else {\n            return this.todos;\n        }\n    }\n    setFilter(filter) {\n        this.filter = filter;\n    }\n    static { this.ctorParameters = () => [\n        { type: HttpClient }\n    ]; }\n    static { this.propDecorators = {\n        todos: [{ type: Input }],\n        deleteTodoItem: [{ type: Output }],\n        markAsComplete: [{ type: Output }],\n        clearcompletedItems: [{ type: Output }]\n    }; }\n};\nTodoListComponent = __decorate([\n    Component({\n        selector: 'org-todo-list',\n        template: __NG_CLI_RESOURCE__0,\n        styles: [__NG_CLI_RESOURCE__1]\n    }),\n    __metadata(\"design:paramtypes\", [HttpClient])\n], TodoListComponent);\n"],"names":[],"sourceRoot":""}