{"version":3,"file":"new-todos-new-todos-component-stories.ec83744a1d0aa037fc49.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA","sources":["webpack://@org/source/./todo/src/app/new-todos/new-todos.component.stories.ts","webpack://@org/source/./todo/src/app/new-todos/new-todos.component.ts"],"sourcesContent":["import { applicationConfig, } from '@storybook/angular';\nimport { NewTodosComponent } from './new-todos.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { importProvidersFrom } from '@angular/core';\nconst meta = {\n    component: NewTodosComponent,\n    title: 'NewTodosComponent',\n    decorators: [\n        applicationConfig({ providers: [importProvidersFrom(HttpClientModule)] }),\n    ],\n};\nexport default meta;\nexport const Primary = {\n    args: {},\n};\n// export const Heading: Story = {\n//   args: {},\n//   play: async ({ canvasElement }) => {\n//     const canvas = within(canvasElement);\n//     expect(canvas.getByText(/new-todos works!/gi)).toBeTruthy();\n//   },\n// };\n","import { __decorate, __metadata } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./new-todos.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./new-todos.component.scss?ngResource\";\nimport { Component, EventEmitter, Output } from \"@angular/core\";\nimport { Validators, FormBuilder } from \"@angular/forms\";\nimport { DataShareService } from \"../data-share.service\";\nexport let NewTodosComponent = class NewTodosComponent {\n    constructor(fb, todoEditService) {\n        this.fb = fb;\n        this.todoEditService = todoEditService;\n        this.addTodoItem = new EventEmitter();\n        this.todoForm = this.fb.group({\n            name: [\"\", Validators.required],\n        });\n        this.todos = [];\n        this.selectedTodoSubscription =\n            this.todoEditService.selectedTodo$.subscribe((selectedTodo) => {\n                this.selectedTodo = selectedTodo;\n                this.todoForm.patchValue({\n                    name: selectedTodo ? selectedTodo.name : \"\",\n                });\n            });\n    }\n    ngOnInit() {\n        this.todoForm = this.fb.group({\n            name: [\"\", Validators.required],\n        });\n    }\n    // addTodo() {\n    //   if (this.todoForm.valid) {\n    //     if (this.selectedTodo) {\n    //       // Update existing todo\n    //       const index = this.todos.findIndex(\n    //         (todo) => todo.id === this.selectedTodo.id\n    //       );\n    //       if (index !== -1) {\n    //         this.todos[index] = {\n    //           ...this.selectedTodo,\n    //           name: this.todoForm.value.name,\n    //         };\n    //         console.log(\"edit\", this.todos);\n    //       }\n    //     } else {\n    //       // Add new todo\n    //       const newTodo = {\n    //         id: this.todos.length + 1, // Generate a unique ID (you can use a more robust method)\n    //         name: this.todoForm.value.name,\n    //       };\n    //       this.todos.push(newTodo);\n    //       console.log(\"add\", newTodo);\n    //     }\n    //     // Reset the form and selectedTodo\n    //     this.todoForm.reset();\n    //     this.todoEditService.clearTodo();\n    //   }\n    // }\n    addTodo() {\n        console.log(\"Selected Todo:\", this.selectedTodo);\n        console.log(\"Todos before update:\", this.todos);\n        if (this.todoForm.valid) {\n            if (this.selectedTodo) {\n                // Update existing todo\n                const index = this.todos.findIndex((todo) => todo.id === this.selectedTodo.id);\n                if (index !== -1) {\n                    this.todos[index] = {\n                        ...this.selectedTodo,\n                        name: this.todoForm.value.name,\n                    };\n                    console.log(\"edit\", this.todos);\n                }\n            }\n            console.log(\"Todos after update:\", this.todos);\n        }\n    }\n    ngOnDestroy() {\n        this.selectedTodoSubscription.unsubscribe();\n    }\n    static { this.ctorParameters = () => [\n        { type: FormBuilder },\n        { type: DataShareService }\n    ]; }\n    static { this.propDecorators = {\n        addTodoItem: [{ type: Output }]\n    }; }\n};\nNewTodosComponent = __decorate([\n    Component({\n        selector: \"org-new-todos\",\n        template: __NG_CLI_RESOURCE__0,\n        styles: [__NG_CLI_RESOURCE__1]\n    }),\n    __metadata(\"design:paramtypes\", [FormBuilder,\n        DataShareService])\n], NewTodosComponent);\n"],"names":[],"sourceRoot":""}