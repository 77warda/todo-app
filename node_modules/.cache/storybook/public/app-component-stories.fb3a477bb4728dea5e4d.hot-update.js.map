{"version":3,"file":"app-component-stories.fb3a477bb4728dea5e4d.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACrsources":["webpack://@org/source/./todo/src/app/app.component.stories.ts","webpack://@org/source/./todo/src/app/app.component.ts"],"sourcesContent":["import { applicationConfig, } from '@storybook/angular';\nimport { AppComponent } from './app.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { importProvidersFrom } from '@angular/core';\nconst meta = {\n    component: AppComponent,\n    title: 'AppComponent',\n    decorators: [\n        applicationConfig({ providers: [importProvidersFrom(HttpClientModule)] }),\n    ],\n};\nexport default meta;\nexport const Primary = {\n    args: {},\n};\n// export const Heading: Story = {\n//   args: {},\n//   play: async ({ canvasElement }) => {\n//     const canvas = within(canvasElement);\n//     expect(canvas.getByText(/app works!/gi)).toBeTruthy();\n//   },\n// };\n","import { __decorate, __metadata } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./app.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./app.component.scss?ngResource\";\nimport { Component } from '@angular/core';\nimport { Validators, FormBuilder } from '@angular/forms';\nimport { TodoServiceService } from '../app/todo-service.service';\nexport let AppComponent = class AppComponent {\n    // constructor(\n    //   private fb: FormBuilder,\n    //   private todoService: TodoServiceService\n    // ) {}\n    // todoForm: FormGroup = this.fb.group({\n    //   name: ['', Validators.required],\n    // });\n    // todos: any[] = [];\n    // data: any;\n    // isLoading = false;\n    // filter: 'all' | 'active' | 'completed' = 'all';\n    constructor(fb, todoService) {\n        this.fb = fb;\n        this.todoService = todoService;\n        this.todos = [];\n        this.isLoading = false;\n        // @Output() deleteTodoItem = new EventEmitter<any>();\n        this.todoForm = this.fb.group({\n            name: ['', Validators.required],\n        });\n        // todos: any[] = [];\n        // data: any;\n        // isLoading = false;\n        this.filter = 'all';\n    }\n    // ngOnInit(): void {\n    //   this.todoForm = this.fb.group({\n    //     name: ['', Validators.required],\n    //   });\n    // }\n    // addTodo() {\n    //   if (this.todoForm.valid) {\n    //     const newTodo = this.todoForm.value;\n    //     this.todoForm.reset();\n    //     this.addTodoItem.emit(newTodo);\n    //   }\n    // }\n    ngOnInit() {\n        this.todoForm = this.fb.group({\n            name: ['', Validators.required],\n        });\n        this.fetchTodos();\n    }\n    fetchTodos() {\n        this.todoService.getTodos().subscribe((response) => {\n            this.todos = response.map((todo) => ({ ...todo, isLoading: true }));\n            this.isLoading = true;\n            setTimeout(() => {\n                this.todos.forEach((todo) => (todo.isLoading = false));\n                this.isLoading = false; // Set isLoading to false once data is loaded\n            }, 2000);\n        });\n    }\n    // deleteTodo(todoId: number) {\n    //   this.deleteTodoItem.emit(todoId);\n    // }\n    markCompleted(todo) {\n        this.todoService\n            .markAsComplete(todo.id, todo.complete)\n            .subscribe((response) => {\n            console.log('Todo status updated successfully:', response);\n            todo.complete = !todo.complete;\n        });\n    }\n    getCountOfTodos() {\n        return this.todos.length;\n    }\n    clearCompleted() {\n        const completedTodos = this.todos.filter((todo) => todo.complete);\n        completedTodos.forEach((todo) => {\n            this.todoService.deleteTodo(todo.id).subscribe(() => {\n                this.todos = this.todos.filter((t) => t.id !== todo.id);\n            });\n        });\n    }\n    getFilteredTodos() {\n        if (this.filter === 'active') {\n            return this.todos.filter((todo) => !todo.complete);\n        }\n        else if (this.filter === 'completed') {\n            return this.todos.filter((todo) => todo.complete);\n        }\n        else {\n            return this.todos;\n        }\n    }\n    setFilter(filter) {\n        this.filter = filter;\n    }\n    // constructor(private todoService: TodoServiceService) {}\n    addTodo(newTodo) {\n        console.log('parent', newTodo);\n        this.todoService.addTodo(newTodo).subscribe((response) => {\n            this.todos.push(response);\n        });\n    }\n    deleteTodo(todoId) {\n        this.todoService.deleteTodo(todoId).subscribe(() => {\n            this.todos = this.todos.filter((todo) => todo.id !== todoId);\n        });\n    }\n    static { this.ctorParameters = () => [\n        { type: FormBuilder },\n        { type: TodoServiceService }\n    ]; }\n};\nAppComponent = __decorate([\n    Component({\n        selector: 'org-root',\n        template: __NG_CLI_RESOURCE__0,\n        styles: [__NG_CLI_RESOURCE__1]\n    }),\n    __metadata(\"design:paramtypes\", [FormBuilder,\n        TodoServiceService])\n], AppComponent);\n"],"names":[],"sourceRoot":""}