"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.configurationGenerator = void 0;
const devkit_1 = require("@nx/devkit");
const cypress_project_1 = require("../cypress-project/cypress-project");
const init_1 = require("../init/init");
const util_functions_1 = require("./lib/util-functions");
const eslint_1 = require("@nx/eslint");
const utilities_1 = require("../../utils/utilities");
const versions_1 = require("../../utils/versions");
const interaction_testing_utils_1 = require("./lib/interaction-testing.utils");
async function configurationGenerator(tree, rawSchema) {
    if ((0, utilities_1.storybookMajorVersion)() === 6) {
        throw new Error((0, utilities_1.pleaseUpgrade)());
    }
    const schema = normalizeSchema(rawSchema);
    const tasks = [];
    const { projectType, targets, root } = (0, devkit_1.readProjectConfiguration)(tree, schema.name);
    const { nextBuildTarget, compiler, viteBuildTarget } = (0, utilities_1.findStorybookAndBuildTargetsAndCompiler)(targets);
    let viteConfigFilePath;
    if (viteBuildTarget) {
        viteConfigFilePath = (0, util_functions_1.getViteConfigFilePath)(tree, root, targets[viteBuildTarget]?.options?.configFile);
    }
    if (viteBuildTarget) {
        if (schema.uiFramework === '@storybook/react-webpack5') {
            devkit_1.logger.info(`Your project ${schema.name} uses Vite as a bundler.
        Nx will configure Storybook for this project to use Vite as well.`);
            schema.uiFramework = '@storybook/react-vite';
        }
        if (schema.uiFramework === '@storybook/web-components-webpack5') {
            devkit_1.logger.info(`Your project ${schema.name} uses Vite as a bundler.
        Nx will configure Storybook for this project to use Vite as well.`);
            schema.uiFramework = '@storybook/web-components-vite';
        }
    }
    if (nextBuildTarget) {
        schema.uiFramework = '@storybook/nextjs';
    }
    const initTask = await (0, init_1.initGenerator)(tree, {
        uiFramework: schema.uiFramework,
        js: schema.js,
    });
    tasks.push(initTask);
    const mainDir = !!nextBuildTarget && projectType === 'application' ? 'components' : 'src';
    (0, util_functions_1.createProjectStorybookDir)(tree, schema.name, schema.uiFramework, schema.js, schema.tsConfiguration, root, projectType, (0, util_functions_1.projectIsRootProjectInStandaloneWorkspace)(root), schema.interactionTests, mainDir, !!nextBuildTarget, compiler === 'swc', !!viteBuildTarget || schema.uiFramework.endsWith('-vite'), viteConfigFilePath);
    if (schema.uiFramework !== '@storybook/angular') {
        (0, util_functions_1.createStorybookTsconfigFile)(tree, root, schema.uiFramework, (0, util_functions_1.projectIsRootProjectInStandaloneWorkspace)(root), mainDir);
    }
    (0, util_functions_1.configureTsProjectConfig)(tree, schema);
    (0, util_functions_1.editTsconfigBaseJson)(tree);
    (0, util_functions_1.configureTsSolutionConfig)(tree, schema);
    (0, util_functions_1.updateLintConfig)(tree, schema);
    (0, util_functions_1.addBuildStorybookToCacheableOperations)(tree);
    (0, util_functions_1.addStorybookToNamedInputs)(tree);
    if (schema.uiFramework === '@storybook/angular') {
        (0, util_functions_1.addAngularStorybookTask)(tree, schema.name, schema.interactionTests);
    }
    else {
        (0, util_functions_1.addStorybookTask)(tree, schema.name, schema.uiFramework, schema.interactionTests);
    }
    if (schema.configureStaticServe) {
        (0, util_functions_1.addStaticTarget)(tree, schema);
    }
    // TODO(katerina): Nx 18 -> remove Cypress
    if (schema.configureCypress) {
        const e2eProject = await (0, util_functions_1.getE2EProjectName)(tree, schema.name);
        if (!e2eProject) {
            const cypressTask = await (0, cypress_project_1.cypressProjectGenerator)(tree, {
                name: schema.name,
                js: schema.js,
                linter: schema.linter,
                directory: schema.cypressDirectory,
                standaloneConfig: schema.standaloneConfig,
                ciTargetName: schema.configureStaticServe
                    ? 'static-storybook'
                    : undefined,
                skipFormat: true,
            });
            tasks.push(cypressTask);
        }
        else {
            devkit_1.logger.warn(`There is already an e2e project setup for ${schema.name}, called ${e2eProject}.`);
        }
    }
    let devDeps = {};
    if (schema.tsConfiguration) {
        devDeps['ts-node'] = versions_1.tsNodeVersion;
    }
    if (schema.interactionTests) {
        devDeps = {
            ...devDeps,
            ...(0, interaction_testing_utils_1.interactionTestsDependencies)(),
        };
    }
    if (schema.configureStaticServe) {
        devDeps['@nx/web'] = versions_1.nxVersion;
    }
    if (projectType !== 'application' &&
        schema.uiFramework === '@storybook/react-webpack5') {
        devDeps['core-js'] = versions_1.coreJsVersion;
    }
    if (schema.uiFramework.endsWith('-vite') &&
        (!viteBuildTarget || !viteConfigFilePath)) {
        // This means that the user has selected a Vite framework
        // but the project does not have Vite configuration.
        // We need to install the @nx/vite plugin in order to be able to use
        // the nxViteTsPaths plugin to register the tsconfig paths in Vite.
        devDeps['@nx/vite'] = versions_1.nxVersion;
    }
    tasks.push((0, devkit_1.addDependenciesToPackageJson)(tree, {}, devDeps));
    if (!schema.skipFormat) {
        await (0, devkit_1.formatFiles)(tree);
    }
    return (0, devkit_1.runTasksInSerial)(...tasks);
}
exports.configurationGenerator = configurationGenerator;
function normalizeSchema(schema) {
    const defaults = {
        interactionTests: true,
        linter: eslint_1.Linter.EsLint,
        js: false,
        tsConfiguration: true,
    };
    return {
        ...defaults,
        ...schema,
    };
}
exports.default = configurationGenerator;
