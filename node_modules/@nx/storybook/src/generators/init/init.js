"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.initGenerator = void 0;
const devkit_1 = require("@nx/devkit");
const js_1 = require("@nx/js");
const versions_1 = require("../../utils/versions");
const utilities_1 = require("../../utils/utilities");
const semver_1 = require("semver");
function checkDependenciesInstalled(host, schema) {
    const packageJson = (0, devkit_1.readJson)(host, 'package.json');
    const devDependencies = {};
    const dependencies = {};
    packageJson.dependencies = packageJson.dependencies || {};
    packageJson.devDependencices = packageJson.devDependencices || {};
    // base deps
    devDependencies['@nx/storybook'] = versions_1.nxVersion;
    let storybook7VersionToInstall = versions_1.storybookVersion;
    if ((0, utilities_1.storybookMajorVersion)() === 7 &&
        (0, utilities_1.getInstalledStorybookVersion)() &&
        (0, semver_1.gte)((0, utilities_1.getInstalledStorybookVersion)(), '7.0.0')) {
        storybook7VersionToInstall = (0, utilities_1.getInstalledStorybookVersion)();
    }
    // Needed for Storybook 7
    // https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#react-peer-dependencies-required
    if (!packageJson.dependencies['react'] &&
        !packageJson.devDependencies['react']) {
        dependencies['react'] = versions_1.reactVersion;
    }
    if (!packageJson.dependencies['react-dom'] &&
        !packageJson.devDependencies['react-dom']) {
        dependencies['react-dom'] = versions_1.reactVersion;
    }
    devDependencies['@storybook/core-server'] = storybook7VersionToInstall;
    devDependencies['@storybook/addon-essentials'] = storybook7VersionToInstall;
    if (schema.uiFramework) {
        if (schema.uiFramework === '@storybook/react-native') {
            devDependencies['@storybook/react-native'] = versions_1.storybookReactNativeVersion;
        }
        else {
            devDependencies[schema.uiFramework] = storybook7VersionToInstall;
            const isPnpm = (0, devkit_1.detectPackageManager)(host.root) === 'pnpm';
            if (isPnpm) {
                // If it's pnpm, it needs the framework without the builder
                // as a dependency too (eg. @storybook/react)
                const matchResult = schema.uiFramework?.match(/^@storybook\/(\w+)/);
                const uiFrameworkWithoutBuilder = matchResult ? matchResult[0] : null;
                if (uiFrameworkWithoutBuilder) {
                    devDependencies[uiFrameworkWithoutBuilder] =
                        storybook7VersionToInstall;
                }
            }
        }
        if (schema.uiFramework === '@storybook/vue3-vite') {
            if (!packageJson.dependencies['@storybook/vue3'] &&
                !packageJson.devDependencies['@storybook/vue3']) {
                devDependencies['@storybook/vue3'] = storybook7VersionToInstall;
            }
        }
        if (schema.uiFramework === '@storybook/angular') {
            if (!packageJson.dependencies['@angular/forms'] &&
                !packageJson.devDependencies['@angular/forms']) {
                devDependencies['@angular/forms'] = '*';
            }
        }
        if (schema.uiFramework === '@storybook/web-components-vite' ||
            schema.uiFramework === '@storybook/web-components-webpack5') {
            devDependencies['lit'] = versions_1.litVersion;
        }
        if (schema.uiFramework === '@storybook/react-native') {
            devDependencies['@storybook/addon-ondevice-actions'] =
                versions_1.storybookReactNativeVersion;
            devDependencies['@storybook/addon-ondevice-backgrounds'] =
                versions_1.storybookReactNativeVersion;
            devDependencies['@storybook/addon-ondevice-controls'] =
                versions_1.storybookReactNativeVersion;
            devDependencies['@storybook/addon-ondevice-notes'] =
                versions_1.storybookReactNativeVersion;
        }
        if (schema.uiFramework.endsWith('-vite')) {
            if (!packageJson.dependencies['vite'] &&
                !packageJson.devDependencies['vite']) {
                devDependencies['vite'] = versions_1.viteVersion;
            }
        }
    }
    return (0, devkit_1.addDependenciesToPackageJson)(host, dependencies, devDependencies);
}
function addCacheableOperation(tree) {
    const nxJson = (0, devkit_1.readNxJson)(tree);
    const cacheableOperations = nxJson.tasksRunnerOptions?.default?.options?.cacheableOperations;
    if (cacheableOperations && cacheableOperations.includes('build-storybook')) {
        nxJson.tasksRunnerOptions.default.options.cacheableOperations.push('build-storybook');
    }
    nxJson.targetDefaults ??= {};
    nxJson.targetDefaults['build-storybook'] ??= {};
    nxJson.targetDefaults['build-storybook'].cache = true;
    (0, devkit_1.updateNxJson)(tree, nxJson);
}
function moveToDevDependencies(tree) {
    (0, devkit_1.updateJson)(tree, 'package.json', (packageJson) => {
        packageJson.dependencies = packageJson.dependencies || {};
        packageJson.devDependencies = packageJson.devDependencies || {};
        if (packageJson.dependencies['@nx/storybook']) {
            packageJson.devDependencies['@nx/storybook'] =
                packageJson.dependencies['@nx/storybook'];
            delete packageJson.dependencies['@nx/storybook'];
        }
        return packageJson;
    });
}
/**
 * This is a temporary fix for Storybook to support TypeScript configuration files.
 * The issue is that if there is a root tsconfig.json file, Storybook will use it, and
 * ignore the tsconfig.json file in the .storybook folder. This results in module being set
 * to esnext, and Storybook does not recognise the main.ts code as a module.
 */
function editRootTsConfig(tree) {
    if (tree.exists('tsconfig.json')) {
        (0, devkit_1.updateJson)(tree, 'tsconfig.json', (json) => {
            if (json['ts-node']) {
                json['ts-node'] = {
                    ...json['ts-node'],
                    compilerOptions: {
                        ...(json['ts-node'].compilerOptions ?? {}),
                        module: 'commonjs',
                    },
                };
            }
            else {
                json['ts-node'] = {
                    compilerOptions: {
                        module: 'commonjs',
                    },
                };
            }
            return json;
        });
    }
}
async function initGenerator(tree, schema) {
    const tasks = [];
    tasks.push(await (0, js_1.initGenerator)(tree, {
        ...schema,
        skipFormat: true,
    }));
    tasks.push(checkDependenciesInstalled(tree, schema));
    moveToDevDependencies(tree);
    editRootTsConfig(tree);
    addCacheableOperation(tree);
    return (0, devkit_1.runTasksInSerial)(...tasks);
}
exports.initGenerator = initGenerator;
exports.default = initGenerator;
